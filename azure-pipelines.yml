# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

steps:
- task: TerraformInstaller@1
  displayName: 'Installing Terraform'
  inputs:
    terraformVersion: 'latest'
  
- task: TerraformTaskV4@4
  displayName: 'terraform init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deployment'
    backendServiceArm: 'devtest'
    backendAzureRmResourceGroupName: 'firstrg701'
    backendAzureRmStorageAccountName: 'firststg702'
    backendAzureRmContainerName: 'devopscontainer'
    backendAzureRmKey: 'alert.terraform.tfstate'
- task: TerraformTaskV4@4
  displayName: 'terraform plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deployment'
    commandOptions: '-var-file="./webapp.tfvars"'
    environmentServiceNameAzureRM: 'devtest'
- task: TerraformTaskV4@4
  displayName: 'terraform apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/deployment'
    commandOptions: '-auto-approve -var-file="./webapp.tfvars"'
    environmentServiceNameAzureRM: 'devtest'